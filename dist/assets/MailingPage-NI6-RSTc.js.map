{"version":3,"file":"MailingPage-NI6-RSTc.js","sources":["../../src/pages/MailingPage.tsx"],"sourcesContent":["// import { createSignal, Component, Show, createEffect, createMemo, Switch, Match, ErrorBoundary, For, JSXElement } from 'solid-js';\n// import FileSelector from \"../components/FileSelector\";\n// import { KnownMime } from '../components/FolderView';\n// import HTMLPreview from '../components/HTMLPreview';\n// import { commandRunner } from '../commandRunner';\n// import StringSelector from '../components/StringSelector';\n// import Button from '../components/Button';\n// import Page from '../components/Page';\n// import myIcon from '../icons/excel.svg?raw';\n// import DataTable from '../components/Datatable';\n// import ErrorComp from '../components/ErrorComp';\n// import Pager from '../components/Pager';\n// import { IDataSource, cellValuesToObjects, notNull } from '../core/Utils';\n// import { ObjectSelector } from '../components/ObjectSelector';\n\nimport { Component } from \"solid-js\";\n\n// console.log({ myIcon });\n\n// interface IMailing {\n//   id: number,\n//   name: string,\n//   user: string,\n//   published: boolean,\n//   templateURL: string,\n//   dataURL: string,\n//   mailingType: \"email\" | \"file\",\n//   args: object,\n//   status: string,\n//   comments: string,\n//   description: string\n// }\n\n// interface IMailingStep {\n//   validate(errors: Errors): void;\n//   shortTitle?: string;\n//   content: JSXElement;\n// }\n\nconst MailingPage: Component = () => {\n  //   // signals\n  //   const [attachments, setAttachments] = createSignal<IDriveFile[]>([]);\n  //   const [error, setError] = createSignal(\"\")\n  //   const [mailingFilter, setMailingFilter] = createSignal(\"\");\n  //   const [mailings, setMailings] = createSignal<IDataSource<IMailing>>();\n  //   const [newAttachment, setNewAttachment] = createSignal<IDriveFile>();\n  //   const [rowNo, setRowNo] = createSignal(1);\n  //   const [rows, setRows] = createSignal<IDataSource>();\n  //   const [selectedDoc, setSelectedDoc] = createSignal<IDriveFile>();\n  //   const [selectedMailing, setSelectedMailing] = createSignal<IMailing>()\n  //   const [selectedSheetName, setSelectedSheetName] = createSignal(\"\");\n  //   const [selectedSpreadsheet, setSelectedSpreadsheet] = createSignal<IDriveFile>();\n  //   const [selectedTemplate, setSelectedTemplate] = createSignal<IDriveFile>();\n  //   const [selectedTemplateHTML, setSelectedTemplateHTML] = createSignal(\"\");\n  //   const [sheetNames, setSheetNames] = createSignal([\"A\", \"B\", \"C\"])\n  //   const [spreadsheetInfo, setSpreadsheetInfo] = createSignal<ISpreadsheetInfo>();\n  //   const [stepNo, setPageNo] = createSignal(0);\n\n  //   const filteredMailings = createMemo(() => {\n  //     let objects = mailings();\n  //     let selectedMailingId = localStorage.getItem(\"selectedMailing\")\n  //     if (selectedMailingId) {\n  //       let found = objects?.rowObjects.find(o => o?.id?.toString() == selectedMailingId)\n  //       if (found) setSelectedMailing(found)\n  //     }\n  //     return objects;\n  //   })\n\n  //   const transformedTemplate = createMemo(() => {\n  //     let row = rows()?.rowObjects[rowNo()]\n  //     let template = selectedTemplateHTML();\n  //     console.log({ row, template })\n  //     return template;\n  //   });\n\n\n  //   const templates = createMemo(() => {\n  //     const result: IDriveFile[] = notNull([selectedDoc(), ...attachments()]);\n  //     if (result.length > 0 && result.indexOf(selectedTemplate()) < 0) setSelectedTemplate(result[0])\n  //     return result;\n  //   });\n\n  //   const server = commandRunner<IServerCommands>(\"Sheet1\");\n  //   const mailingSteps: IMailingStep[] = [\n  //     {\n  //       shortTitle: \"Modèles sauvegardés\",\n  //       content: (\n  //         <>\n  //           <p>Publipostages</p>\n  //           <StringSelector label='SheetName' selectedString={mailingFilter()} setSelectedString={(s) => setMailingFilter(s)}\n  //             strings={[\"Mes publipostages\", \"Tous les publipostages\"]}></StringSelector>\n  //           <DataTable objects={filteredMailings()} columns={[\"name\", \"user\", \"comments\", \"description\"]}\n  //             selectedRow={selectedMailing()} setSelectedRow={onSetSelectedMailing}></DataTable>\n  //           <Button class=\"btn-primary\" onClick={nextStep}>Nouveau plublipostage...</Button>\n  //         </>\n  //       ),\n  //       validate(errors) {\n  //         if (selectedMailing() == null) errors.push(\"Vous devez sélectionner un publipostage ou en créer un.\")\n  //       }\n  //     },\n  //     {\n  //       shortTitle: \"Fichier de données\",\n  //       content: (\n  //         <>\n  //           <p>Sélectionnez la source de donnée du publipostage</p>\n  //           <FileSelector selectedFile={selectedSpreadsheet} setSelectedFile={setSelectedSpreadsheet} mimeType={KnownMime.GOOGLE_SHEET}>Select sheet</FileSelector>\n  //         </>\n  //       ),\n  //       validate(errors) {\n  //         if (selectedSheet() == null) errors.push(\"Vous devez sélectionner un publipostage ou en créer un.\")\n  //       }\n  //     },\n\n  //     {\n  //       shortTitle: \"Feuille des données\",\n  //       content: (\n  //         <>\n  //           <Show when={selectedSpreadsheet()}>\n  //             <StringSelector label='SheetName' selectedString={selectedSheetName()} setSelectedString={(s) => setSelectedSheetName(s)}\n  //               strings={sheetNames()}></StringSelector>\n  //             <DataTable objects={rows()} ></DataTable>\n  //           </Show>\n\n  //         </>\n  //       ),\n  //       validate(errors) {\n  //         if (selectedSheet() == null) errors.push(\"Vous devez sélectionner un publipostage ou en créer un.\")\n  //       }\n  //     },\n  //     {\n  //       shortTitle: \"Modèle\",\n  //       content: (\n  //         <>\n  //           <p>Selectionner le modèle de document ou de courrier du publipostage</p>\n  //           <FileSelector selectedFile={selectedDoc} setSelectedFile={setSelectedDoc} mimeType={KnownMime.GOOGLE_DOC}>Select doc</FileSelector>\n  //           <Show when={selectedDoc()}>\n  //             <For each={attachments()}>\n  //               {attachment => (\n  //                 <FileSelector selectedFile={() => attachment} setSelectedFile={() => removeAttachment(attachment)} mimeType={KnownMime.GOOGLE_DOC}>Select doc</FileSelector>\n  //               )}\n  //             </For>\n  //             <FileSelector selectedFile={newAttachment} setSelectedFile={addNewAttachment} mimeType={KnownMime.GOOGLE_DOC}>Addd attachment</FileSelector>\n  //           </Show>\n  //         </>\n  //       ),\n  //       validate(errors) {\n  //         if (selectedSheet() == null) errors.push(\"Vous devez sélectionner un publipostage ou en créer un.\")\n  //       }\n  //     },\n  //     {\n  //       shortTitle: \"Dernier details\",\n  //       content: (<>\n  //         <p>ici on choisis les récipients ou le dossier de sortie</p>\n  //       </>\n  //       ),\n  //       validate(errors) {\n  //         if (selectedSheet() == null) errors.push(\"Vous devez sélectionner un publipostage ou en créer un.\")\n  //       }\n  //     },\n  //     {\n  //       shortTitle: \"Aperçu\",\n  //       content: (<>\n  //         <ObjectSelector \n  //           label=\"Selected template\" \n  //           objects={templates()}\n  //           selectedObject={selectedTemplate()}\n  //           setSelectedObject={setSelectedTemplate}\n  //           getKey={t => t.name} />\n  //         <Pager pages={rows()?.rowObjects?.length} currentPage={rowNo()} setCurrentPage={setRowNo} ></Pager>\n  //         <HTMLPreview content={transformedTemplate()} class=\"flex-1 w-full\" />\n  //       </>\n  //       ),\n  //       validate(errors) {\n  //         if (selectedSheet() == null) errors.push(\"Vous devez sélectionner un publipostage ou en créer un.\")\n  //       }\n  //     },\n  //     {\n  //       shortTitle: \"Exécution\",\n  //       content: (\n  //         <>\n  //           <p>Record found: 1234</p>\n  //           <button class=\"btn btn-primary\">Appuyez pour lancer le publipostage</button>\n  //         </>\n  //       ),\n  //       validate(errors) {\n  //         if (selectedSheet() == null) errors.push(\"Vous devez sélectionner un publipostage ou en créer un.\")\n  //       }\n  //     },\n  //   ];\n\n  //   const currentMailingStep = createMemo(() => {\n  //     return mailingSteps[stepNo()]\n  //   })\n\n\n  //   const selectedSheet = createMemo(() => {\n  //     const sheetInfo = spreadsheetInfo()?.sheets.filter(f => f.sheetName === selectedSheetName())[0];\n  //     return sheetInfo;\n  //   })\n\n\n  //   createEffect(async () => {\n  //     let rangeValues = await server.getRangeValues({ spreadsheetId: null, sheetName: \"Mailings\" })\n  //     let objects = cellValuesToObjects(rangeValues);\n  //     setMailings(objects);\n  //   })\n\n  //   createEffect(async () => {\n  //     let id = selectedSpreadsheet()?.id;\n  //     setSpreadsheetInfo(null);\n  //     if (id) {\n  //       let spreadsheetInfo = await server.getSpreadsheetInfo(id, { maxRows: 10 });\n  //       setSpreadsheetInfo(spreadsheetInfo); // Mise à jour du signal avec les nouvelles données\n  //       const sheetNames = spreadsheetInfo.sheets.map((sh) => sh.sheetName)\n  //       setSheetNames(sheetNames)\n  //       setSelectedSheetName(sheetNames[0]);\n  //     }\n  //   });\n\n  //   createEffect(async () => {\n  //     let id = selectedTemplate()?.id;\n  //     let result = id ? (await server.convertDocument(selectedTemplate()?.id, \"html\", \"\")).resultText\n  //       : null;\n  //     setSelectedTemplateHTML(result);\n  //   })\n\n  //   createEffect(async () => {\n  //     try {\n  //       let sheetName = selectedSheetName();\n  //       let rows: IDataSource;\n  //       if (sheetName) {\n  //         let cellValues = await server.getRangeValues({ spreadsheetId: spreadsheetInfo()?.driveFile.id, sheetName: selectedSheetName() })\n  //         rows = cellValuesToObjects(cellValues);\n  //       } else {\n  //         rows = null;\n  //       }\n  //       setRows(rows)\n  //     } finally {\n  //       //completeLoading();\n  //     }\n  //   });\n\n  //   function addNewAttachment(newAttachment: IDriveFile) {\n  //     setAttachments([...attachments(), newAttachment])\n  //   }\n\n  //   function removeAttachment(attachment: IDriveFile) {\n  //     setAttachments(attachments().filter(a => a !== attachment))\n  //   }\n\n  //   function previousStep() {\n  //     setPageNo(stepNo() - 1)\n  //   }\n\n  //   function nextStep() {\n  //     let errors: Errors = [];\n  //     currentMailingStep().validate(errors);\n  //     if (errors.length == 0) {\n  //       setError(\"\");\n  //       setPageNo(stepNo() + 1)\n  //     } else {\n  //       setError(errors.map(e => e.toString()).join(\", \"))\n  //     }\n  //   }\n  //   function onSetSelectedMailing(newMailing: IMailing) {\n  //     setSelectedMailing(newMailing);\n  //     localStorage.setItem(\"selectedMailing\", String(newMailing?.id))\n  //   }\n\n  return (\n    <>HI Mailing\n      {/*\n//     <Page>\n//       <ul class=\"steps\">\n//         <For each={mailingSteps}>\n//           {(step, index) => (\n//             <li classList={{\n//               step: true,\n//               \"step-primary\": stepNo() >= index()\n//             }}>\n//               {step.shortTitle}\n//             </li>\n//           )}\n//         </For>\n//       </ul>\n//       <hr class=\"mb-3\" />\n//       <div class=\"flex-1 overflow-y-auto flex flex-col\">\n//         {/*we are in a scroll area between our steps on top and our buttons at the bottom* /}\n//         <div class=\"flex-1 flex flex-col\">\n//           <ErrorBoundary fallback={(error, reset) => ErrorComp({ error, reset, mainLabel: \"Error in Mailing Page\" })}>\n//             {currentMailingStep().content}\n//           </ErrorBoundary>\n//         </div>\n//       </div>\n//       <div>\n//         <Button onClick={previousStep} disabled={stepNo() == 0}>Previous</Button>&ensp;\n//         <Button onClick={nextStep} disabled={stepNo() >= mailingSteps.length - 1}>Next</Button>\n//         <span>{error()}</span>\n//       </div>\n//     </Page >*/\n      }\n    </>\n  );\n};\n\nexport default MailingPage;\n"],"names":["MailingPage"],"mappings":"AAuCA,MAAMA,EAAyBA,IAsO7B"}