{"version":3,"mappings":"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","names":["UnknownFormLineComponent","props","_el$","_tmpl$2","_$createComponent","Show","when","template","fallback","_tmpl$3","children","_el$2","_tmpl$","firstChild","_$insert","JSON","stringify","NumberComponent","lazy","__vitePreload","ArrayComponent","TextComponent","components","number","array","text","FormLineComponent","dynamicComponent","createMemo","type","ErrorBoundary","error","reset","_el$3","Dynamic","component","value","setValue","FormSectionComponent","getValue","line","key","target","For","each","lines","i","a","FormPageComponent","section","FormComponent","pageNo","setPageNo","createSignal","pages","currentPage","sections","forEach","newPage","push","title","_el$4","$$click","_el$5","_tmpl$4","_$delegateEvents","TestPage","x","label","help","required","columns","item","console","log","b","c","t","section3","d","e","f","nextSibling"],"sources":["../../src/components/UnknownFormLineComponent.tsx","../../src/components/FormLineComponent.tsx","../../src/components/FormSectionComponent.tsx","../../src/components/FormPageComponent.tsx","../../src/components/FormComponent.tsx","../../src/pages/TestPage.tsx"],"sourcesContent":["import { Component, For, JSX, Show, createMemo, createSignal } from 'solid-js';\nimport { FormSection, FormTemplate, FormLineTemplate, FormNumberTemplate } from '../core/FormTemplate';\n// import { navigateToPage } from '../App';\n// import { twMerge } from 'tailwind-merge';\n\ninterface UnknownFormLineProps {\n  //   class?: string;\n  //   startIcon?: any;\n  //   onClick?: (event: MouseEvent) => void;\n  //   disabled?: boolean;\n  //   children: JSX.Element;\n  template: FormLineTemplate\n}\n\nconst UnknownFormLineComponent: Component<UnknownFormLineProps> = (props) => {\n\n  return (\n    <div>\n      <Show when={props.template} fallback={<p>UnknownFormLine without template</p>}>\n        <p>Unknown formLine {JSON.stringify(props.template)}</p>\n      </Show>\n    </div>\n  );\n};\n\nexport default UnknownFormLineComponent;","import { Component, ErrorBoundary, Show, createMemo, lazy } from 'solid-js';\nimport { FormLineTemplate } from '../core/FormTemplate';\nimport { Dynamic } from 'solid-js/web';\nimport UnknownFormLineComponent from './UnknownFormLineComponent';\n// import { navigateToPage } from '../App';\n// import { twMerge } from 'tailwind-merge';\n// FormNumberComponent\nconst NumberComponent = lazy(() => import(\"./FormNumberComponent\"));\nconst ArrayComponent = lazy(() => import(\"./FormArrayComponent\"));\nconst TextComponent = lazy(() => import(\"./FormTextComponent\"));\n// \n\nconst components: Record<string, any> = {\n  number: NumberComponent,\n  array: ArrayComponent,\n  text: TextComponent\n}\n\n\n\ninterface IFormLineProps {\n  template: FormLineTemplate;\n  value: any;\n  setValue: (value: any) => void\n}\n\n\n\nconst FormLineComponent: Component<IFormLineProps> = (props) => {\n  const dynamicComponent = createMemo(() => {\n    return components[props.template.type] ?? UnknownFormLineComponent\n  })\n\n  return (\n    <div>\n      <Show when={props.template} fallback={<p>FormLine sans modèle</p>}>\n        {/* <p>we are in formline type:{props.template.type} value:{JSON.stringify(props.value)}</p>  */}\n        <ErrorBoundary fallback={(error, reset) => <p>{error}</p>}>\n          <Dynamic component={dynamicComponent()} template={props.template} value={props.value} setValue={props.setValue} />\n        </ErrorBoundary>\n      </Show>\n    </div>\n  );\n};\n\nexport default FormLineComponent;","import { Component, For, JSX, Show, createMemo, createSignal } from 'solid-js';\nimport { FormSection, FormTemplate, SectionLine } from '../core/FormTemplate';\nimport FormLineComponent from './FormLineComponent';\nimport { template } from 'solid-js/web';\n// import { navigateToPage } from '../App';\n// import { twMerge } from 'tailwind-merge';\n\ninterface IFormSectionProps {\n  //   class?: string;\n  //   startIcon?: any;\n  //   onClick?: (event: MouseEvent) => void;\n  //   disabled?: boolean;\n  //   children: JSX.Element;\n  template: FormSection\n  value: any;\n  setValue: (v: any) => void\n}\n\nconst FormSectionComponent: Component<IFormSectionProps> = (props) => {\n  function getValue(line: SectionLine) {\n    let value = props.value;\n    if (props.template.key) value = value[props.template.key];\n    if ('key' in line) return value[line.key]\n    else return value;\n  }\n  function setValue(line: SectionLine, value: any) {\n    let target = props.value;\n    if (props.template.key) target = target[props.template.key];\n    if ('key' in line) return target[line.key] = value;\n  }\n\n  return (\n    <div>\n      <Show when={props.template} fallback={<p>FormSection sans modèle</p>}>\n        <For each={props.template.lines}>{(line, i) =>\n          <FormLineComponent template={line} value={getValue(line)} setValue={(a) => setValue(line, a)} />\n        }</For>\n      </Show>\n    </div>\n  );\n};\n\nexport default FormSectionComponent;","import { Component, For, JSX, Show, createMemo, createSignal } from 'solid-js';\nimport { FormSection, FormTemplate } from '../core/FormTemplate';\nimport FormSectionComponent from './FormSectionComponent';\n// import { navigateToPage } from '../App';\n// import { twMerge } from 'tailwind-merge';\n\ninterface IFormPageProps {\n  //   class?: string;\n  //   startIcon?: any;\n  //   onClick?: (event: MouseEvent) => void;\n  //   disabled?: boolean;\n  //   children: JSX.Element;\n  template: FormSection[]\n  value: any;\n  setValue: (v: any) => void\n}\n\nconst FormPageComponent: Component<IFormPageProps> = (props) => {\n\n  return (\n    <div>\n      <Show when={props.template} fallback={<p>FormPage sans modèle</p>}>\n        {/* <p>we are in page ... value:{JSON.stringify(props.value)}</p> */}\n        <For each={props.template}>{(section, i) =>\n          <FormSectionComponent template={section} value={props.value} setValue={props.setValue} />\n        }</For>\n      </Show>\n    </div>\n  );\n};\n\nexport default FormPageComponent;","import { Component, For, JSX, createMemo, createSignal } from 'solid-js';\nimport { FormSection, FormTemplate } from '../core/FormTemplate';\nimport FormPage from './FormPageComponent';\nimport FormPageComponent from './FormPageComponent';\n// import { navigateToPage } from '../App';\n// import { twMerge } from 'tailwind-merge';\n\ninterface IFormProps {\n  //   class?: string;\n  //   startIcon?: any;\n  //   onClick?: (event: MouseEvent) => void;\n  //   disabled?: boolean;\n  //   children: JSX.Element;\n  template: FormTemplate\n  value: any;\n  setValue: (value: any) => void\n}\n\nconst FormComponent: Component<IFormProps> = (props) => {\n  let [pageNo, setPageNo] = createSignal(1)\n  //   function handleClick(event: MouseEvent) {\n  //     event.preventDefault();\n  //     props.onClick(event)\n  //   };\n  let pages = createMemo(() => {\n    let page = 0\n    let currentPage: FormSection[];\n    let pages: FormSection[][] = []\n    props.template.sections.forEach((section, i) => {\n      if (i == 0 || section.newPage) {\n        page += 1\n        currentPage = []\n        pages.push(currentPage);\n      }\n      currentPage.push(section)\n    })\n    return pages;\n  })\n  let currentPage = createMemo(() => {\n    return pages()[pageNo() - 1];\n  })\n  return (\n    <>\n      <h1>{props.template.title}</h1>\n      <p>page: {pageNo()}</p>\n      <FormPageComponent template={currentPage()} value={props.value} setValue={props.setValue} />\n      <button onClick={() => setPageNo(pageNo() - 1)}>-1</button><button onClick={() => setPageNo(pageNo() + 1)}>+1</button>\n    </>\n  );\n};\n\nexport default FormComponent;","import { Component, createSignal } from \"solid-js\";\nimport { FormTemplate } from \"../core/FormTemplate\";\nimport FormComponent from \"../components/FormComponent\";\n\nconst TestPage: Component = () => {\n  let x: FormTemplate = {\n    type: 'form',\n    title: 'voici Form1',\n    sections: [\n      {\n        type: 'section', title: 'section1',\n        lines: [\n          { key: 'a', type: 'number', label: { label: 'number A', help: \"Should be between 1 to 5\", required: \"*\" } },\n          { key: 'b', type: 'number', label: 'number B' },\n          {\n            key: 'c', type: 'array', label: 'Une liste C', columns: [\n              { type: 'text', key: 't' }\n            ],\n            item: \"enfant\"\n          },\n        ],\n        newPage: false\n      },\n      {\n        type: 'section', title: 'section2',\n        lines: [\n          { type: 'text', label: 'text D', key: 'd' },\n        ],\n        newPage: false\n      },\n      {\n        key: 'section3',\n        type: 'section', title: 'section3',\n        lines: [\n          { key: \"e\", type: 'number', label: 'number e' },\n          { key: \"f\", type: 'number', label: 'number f' },\n        ],\n        newPage: true\n      }\n    ]\n  };\n  console.log(x);\n\n  const [value, setValue] = createSignal({ a: 1, b: 2, c: [{ t: \"t1\" }, { t: \"t2\" }], section3: { d: 123, e: 22, f: 33 } });\n\n  return (\n    <div class=\"prose\">\n      <h1>Test Page</h1>\n      <hr />\n      <FormComponent template={x} value={value()} setValue={setValue} />\n    </div>\n  );\n};\n\nexport default TestPage;\n\n"],"file":"assets/TestPage-c1UThsIr.js"}